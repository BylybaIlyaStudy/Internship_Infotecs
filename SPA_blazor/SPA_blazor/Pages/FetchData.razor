@page "/"

@using Infotecs.SPA_blazor
@using Infotecs.SPA_blazor.Data
@inject UserStatisticsService StatisticsService

<button @onclick="@Update">Update</button>

@if (userStatistics == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Имя узла</th>
                <th>Дата последней статистики</th>
                <th>Версия Client</th>
                <th>Тип устройства</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in userStatistics)
            {
                <tr>
                    <td>@user.NameOfNode</td>
                    <td>@user.DateTimeOfLastStatistics</td>
                    <td>@user.VersionOfClient</td>
                    <td>@user.TypeOfDevice</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    const int time = 10000; //период обновления данных

    private List<UserStatistics> userStatistics = null;

    private static BlazorTimer Timer = new BlazorTimer();

    protected override async Task OnInitializedAsync()
    {
        //forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        userStatistics = await Update();
        StartTimer();
    }

    protected async Task<List<UserStatistics>> Update()
    {
        List<UserStatistics> users = null;
        try
        {
            users = await StatisticsService.GetUserStatisticsAsync();
        }
        catch (Exception ex)
        {
            users = userStatistics;
            Console.WriteLine(ex.Message);
        }

        if (users != null)
        {
            foreach (var user in users)
            {
                Console.WriteLine(user.NameOfNode);
            }
        }

        return users;
    }

    private void StartTimer()
    {
        Timer.SetTimer(time);
        Timer.OnElapsed += TimerElapsedHandler;
    }

    public async void TimerElapsedHandler()
    {
        userStatistics = await Update();
        await this.InvokeAsync(new Action(() => this.StateHasChanged()));
    }
}
