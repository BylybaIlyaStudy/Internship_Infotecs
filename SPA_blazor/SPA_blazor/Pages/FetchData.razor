@page "/"

@using Infotecs.SPA_blazor
@using Infotecs.SPA_blazor.Data
@inject UserStatisticsService StatisticsService

@if (userStatistics == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (userForEvents != null)
    {
        <div class="statistics_style">
            <h1>Статистика</h1>
            <table class="table">
                <thead>
                    <tr>
                        <th>Имя узла</th>
                        <th>Дата последней статистики</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in userStatistics)
                    {
                        <tr @onclick='(e => ShowEvents(user))'>
                            <td>@user.NameOfNode</td>
                            <td>@user.DateTimeOfLastStatistics</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="events_style">
            <h1>События</h1>
            <h2>@userForEvents.NameOfNode</h2>
            <table class="table">
                <tbody>
                    <tr>
                        <th>Идентификатор</th>
                        <th>@userForEvents.UserID</th>
                    </tr>
                </tbody>
                <tbody>
                    <tr>
                        <th>Версия ПО ViPNet Client</th>
                        <th>@userForEvents.VersionOfClient</th>
                    </tr>
                </tbody>
            </table>
            <table class="table">
                <thead>
                    <tr>
                        <th>Дата</th>
                        <th>Событие</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var _event in userForEvents.Events)
                    {
                        <tr>
                            <td>@_event.Date</td>
                            <td>@_event.Name</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <h1>Статистика</h1>
        <table class="table">
            <thead>
                <tr>
                    <th>Имя узла</th>
                    <th>Дата последней статистики</th>
                    <th>Версия Client</th>
                    <th>Тип устройства</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in userStatistics)
                {
                    <tr @onclick='(e => ShowEvents(user))'>
                        <td>@user.NameOfNode</td>
                        <td>@user.DateTimeOfLastStatistics</td>
                        <td>@user.VersionOfClient</td>
                        <td>@user.TypeOfDevice</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    const int time = 10000; //период обновления данных

    private List<UserStatistics> userStatistics = null;

    private static BlazorTimer Timer = new BlazorTimer();

    private UserStatistics userForEvents = null;

    private void ShowEvents(UserStatistics userStatistics)
    {
        if (userForEvents == null)
        {
            userForEvents = userStatistics;
        }
        else
        {
            if (userForEvents.Equals(userStatistics))
            {
                userForEvents = null;
            }
            else
            {
                userForEvents = userStatistics;
            }
        }

        this.InvokeAsync(new Action(() => this.StateHasChanged()));
    }

    protected override async Task OnInitializedAsync()
    {
        userStatistics = await Update();
        StartTimer();
    }

    protected async Task<List<UserStatistics>> Update()
    {
        List<UserStatistics> users = null;
        try
        {
            users = await StatisticsService.GetUserStatisticsAsync();
        }
        catch (Exception ex)
        {
            users = userStatistics;
            Console.WriteLine(ex.Message);
        }

        if (users != null)
        {
            foreach (var user in users)
            {
                Console.WriteLine(user.NameOfNode);
            }
        }

        return users;
    }

    private void StartTimer()
    {
        Timer.SetTimer(time);
        Timer.OnElapsed += TimerElapsedHandler;
    }

    public async void TimerElapsedHandler()
    {
        userStatistics = await Update();
        await this.InvokeAsync(new Action(() => this.StateHasChanged()));
    }
}
