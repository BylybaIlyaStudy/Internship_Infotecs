{"version":3,"sources":["webpack:///src/app/UsersWithEvents/UsersWithEvents.component.ts","webpack:///src/app/UsersWithEvents/UsersWithEvents.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/UsersWithEvents/ChangeNameDialog/ChangeNameDialog.component.ts","webpack:///src/app/UsersWithEvents/ChangeNameDialog/ChangeNameDialog.component.html","webpack:///src/app/HTTPService.ts","webpack:///src/app/Models/UserStatistics.ts","webpack:///src/app/Users/Users.component.ts","webpack:///src/app/Users/Users.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["UsersWithEventsComponent","http","router","activateRoute","dialog","displayedColumnsUsers","displayedColumnsEvents","users","user","connection","withUrl","build","enteringDescription","displayedEvents","subscription","params","subscribe","selectedUserID","getStatisticsList","data","find","x","id","getEventsForUser","events","on","getUsersList","forEach","description","start","off","stop","navigate","createEventsDescription","changeEnteringDescription","deleteEvents","dialogConfig","dialogRef","open","afterClosed","value","console","log","openDialog","selector","templateUrl","styleUrls","AppComponent","appRoutes","path","component","AppModule","forRoot","imports","declarations","bootstrap","entryComponents","ChangeNameDialogComponent","close","changeUserName","save","HTTPService","link","get","ID","put","providedIn","UserStatistics","UsersComponent","displayedColumns","platform","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component, OnInit, OnDestroy, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\n\r\nimport * as _ from 'lodash'; \r\nimport * as signalR from '@aspnet/signalr';\r\n\r\nimport { UserStatistics } from '../Models/UserStatistics';  \r\nimport { HTTPService } from '../HTTPService';\r\nimport { Events } from '../Models/Events';\r\nimport { ChangeNameDialogComponent } from './ChangeNameDialog/ChangeNameDialog.component';\r\n\r\n@Component({\r\n    selector: 'UsersWithEvents-component',\r\n    templateUrl: './UsersWithEvents.component.html',\r\n    styleUrls: ['./UsersWithEvents.component.css']\r\n})\r\n\r\nexport class UsersWithEventsComponent implements OnInit, OnDestroy { \r\n    displayedColumnsUsers: string[] = ['name', 'date'];\r\n    displayedColumnsEvents: string[] = ['name', 'date', 'description', 'level'];\r\n\r\n    users: UserStatistics[] = [];\r\n    user: UserStatistics = new UserStatistics;\r\n\r\n    connection = new signalR.HubConnectionBuilder()\r\n        .withUrl('https://localhost:5001/api')\r\n        .build();\r\n\r\n    private subscription: Subscription;\r\n    constructor(private http: HTTPService, private router: Router, private activateRoute: ActivatedRoute, public dialog: MatDialog){\r\n        this.subscription = activateRoute.params.subscribe(params=>this.selectedUserID=params['id']);\r\n    }\r\n\r\n    ngOnInit(): void{    \r\n        this.http.getStatisticsList().subscribe((data:UserStatistics[]) => {\r\n            this.users = data;\r\n\r\n            this.user = this.users.find(x => x.id == this.selectedUserID);\r\n            this.http.getEventsForUser(this.selectedUserID).subscribe((data:Events[]) => {\r\n                this.user.events = data;\r\n                this.displayedEvents = this.user.events;\r\n                this.enteringDescription = false;\r\n            });\r\n        });\r\n\r\n        this.connection.on('update statistics', data => {\r\n            this.http.getStatisticsList().subscribe((data:UserStatistics[]) => this.users=data);\r\n        });\r\n        \r\n        this.connection.on('update users', data => {\r\n            this.http.getStatisticsList().subscribe((data:UserStatistics[]) => {\r\n                this.users = data;\r\n                this.http.getUsersList().subscribe((data:UserStatistics[]) => {\r\n                    this.users.forEach(user => {\r\n                        user.description = data.find(x => x.id == user.id).description;\r\n                    });\r\n                })\r\n            });\r\n        });\r\n\r\n        this.connection.on('update events ' + this.selectedUserID, data => {\r\n            this.http.getEventsForUser(this.selectedUserID).subscribe((data:Events[]) => {\r\n                this.user.events = data;\r\n                this.displayedEvents = data;\r\n            });\r\n        });\r\n\r\n        this.connection.start();\r\n    }\r\n\r\n    ngOnDestroy(): void{\r\n        this.connection.off('update statistics');\r\n        this.connection.off('update users');\r\n        this.connection.off('update events ' + this.selectedUserID);\r\n\r\n        this.connection.stop();\r\n    }\r\n\r\n    setUser(user) {\r\n        this.connection.off('update events ' + this.selectedUserID);\r\n\r\n        this.selectedUserID = user.id;\r\n\r\n        this.router.navigate(['/users', user.id]);\r\n\r\n        this.user = this.users.find(x => x.id == this.selectedUserID);\r\n        this.http.getEventsForUser(this.selectedUserID).subscribe((data:Events[]) => {\r\n            this.user.events = data;\r\n            this.displayedEvents = this.user.events;\r\n            this.enteringDescription = false;\r\n        });\r\n\r\n        this.connection.on('update events ' + this.selectedUserID, data => {\r\n            this.http.getEventsForUser(this.selectedUserID).subscribe((data:Events[]) => {\r\n                this.user.events = data;\r\n                this.displayedEvents = data;\r\n            });\r\n        });\r\n    }\r\n\r\n    selectedUserID: string;\r\n    enteringDescription: boolean = false;\r\n    displayedEvents: Events[] = [];\r\n    \r\n    createDescription() {\r\n        this.http.createEventsDescription(this.displayedEvents);\r\n\r\n        this.changeEnteringDescription();\r\n    }\r\n\r\n    changeEnteringDescription() {\r\n        this.enteringDescription = !this.enteringDescription;\r\n\r\n        if (this.enteringDescription) {\r\n            this.displayedColumnsEvents = ['name', 'description'];\r\n            this.displayedEvents = _.uniqBy(this.user.events, 'name');\r\n        }\r\n        else {\r\n            this.displayedColumnsEvents = ['name', 'date', 'description'];\r\n            this.displayedEvents = this.user.events;\r\n        }\r\n    }\r\n\r\n    deleteEvents() {\r\n        this.http.deleteEvents(this.selectedUserID);\r\n    }\r\n\r\n    openDialog() {\r\n        const dialogConfig = new MatDialogConfig();\r\n        dialogConfig.data = { user: this.user };\r\n        let dialogRef = this.dialog.open(ChangeNameDialogComponent, dialogConfig);\r\n\r\n        dialogRef.afterClosed().subscribe(value => {\r\n            console.log(value); \r\n        });\r\n    }\r\n}\r\n\r\n","<div class=\"users\">\r\n    <table mat-table [dataSource]=\"users\" width =\"100%\">\r\n        <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> Имя узла </th>\r\n            <td mat-cell *matCellDef=\"let item\" (click) = \"setUser(item)\"> {{item.name}} </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"date\">\r\n            <th mat-header-cell *matHeaderCellDef> Дата последней статистики </th>\r\n            <td mat-cell *matCellDef=\"let item\" (click) = \"setUser(item)\"> {{item.date}} </td>\r\n        </ng-container>\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumnsUsers\"></tr>\r\n        <tr mat-row *matRowDef=\"let user; columns: displayedColumnsUsers;\" \r\n            [ngClass]=\"{'highlight': selectedUserID == user.id}\" \r\n            (click)=\"setUser(user)\"></tr>\r\n    </table>\r\n</div>\r\n<div class=\"events\">\r\n    <h2>{{user.name}}</h2>\r\n    <button class=\"edit\" mat-stroked-button (click)=\"openDialog()\">Редактировать пользователя</button>\r\n    <button class=\"delete\" (click) = \"deleteEvents()\" mat-stroked-button>Удалить логи на узле</button>\r\n    <p>Идентификатор: {{user.id}}</p>\r\n    <p>Версия ПО ViPNet Client: {{user.version}}</p>\r\n    <b>События ViPNet Client</b>\r\n    <button class=\"edit\" *ngIf=\"!enteringDescription\" mat-stroked-button (click) = \"changeEnteringDescription()\">Редактировать описания</button>\r\n    <button class=\"confirm\" *ngIf=\"enteringDescription\" mat-stroked-button (click) = \"createDescription()\">Подтвердить</button>\r\n    <button class=\"cancel\" *ngIf=\"enteringDescription\" mat-stroked-button (click) = \"changeEnteringDescription()\">Отменить</button>\r\n\r\n    <table mat-table [dataSource]=\"displayedEvents\"  width =\"100%\">\r\n        <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> Событие </th>\r\n            <td mat-cell *matCellDef=\"let item\"> {{item.name}} </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"date\">\r\n            <th mat-header-cell *matHeaderCellDef> Дата </th>\r\n            <td mat-cell *matCellDef=\"let item\"> {{item.date}} </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"description\">\r\n            <th mat-header-cell *matHeaderCellDef> Описание </th>\r\n            <td mat-cell *matCellDef=\"let item\"> \r\n                <p *ngIf=\"!enteringDescription\">{{item.description}}</p>\r\n                <div *ngIf=\"enteringDescription\">\r\n                    <mat-form-field>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"item.description\">\r\n                    </mat-form-field>\r\n                </div>\r\n            </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"level\">\r\n            <th mat-header-cell *matHeaderCellDef> Уровень </th>\r\n            <td mat-cell *matCellDef=\"let item\"> {{item.level}} </td>\r\n        </ng-container>\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumnsEvents\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumnsEvents;\"></tr>\r\n    </table>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: `./app.component.html`,\r\n    styleUrls: ['./app.component.css']\r\n})\r\n\r\nexport class AppComponent implements OnInit { \r\n    constructor(private router: Router){}\r\n\r\n    ngOnInit(): void {  \r\n        this.router.navigate(['/users']);\r\n    }\r\n}\r\n","<router-outlet></router-outlet>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { UsersComponent } from './Users/Users.component';\r\nimport { UsersWithEventsComponent } from './UsersWithEvents/UsersWithEvents.component';\r\nimport { ChangeNameDialogComponent } from './UsersWithEvents/ChangeNameDialog/ChangeNameDialog.component';\r\n\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\n\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst appRoutes: Routes =[\r\n    { path: '', component: AppComponent },\r\n    { path: 'users', component: UsersComponent },\r\n    { path: 'users/:id', component: UsersWithEventsComponent }\r\n];\r\n\r\n@NgModule({\r\n    imports:      [ BrowserModule, FormsModule, HttpClientModule, \r\n                    BrowserAnimationsModule, MatTableModule, MatButtonModule, \r\n                    MatInputModule, RouterModule.forRoot(appRoutes), MatDialogModule, MatDividerModule ],\r\n    declarations: [ AppComponent, UsersComponent, UsersWithEventsComponent, ChangeNameDialogComponent ],\r\n    bootstrap:    [ AppComponent ],\r\n    entryComponents: [ ChangeNameDialogComponent ]\r\n})\r\nexport class AppModule { }","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { HTTPService } from '../../HTTPService';\r\n\r\n@Component({\r\n    selector: 'ChangeNameDialogComponent',\r\n    templateUrl: './ChangeNameDialog.component.html'\r\n  })\r\n\r\n  export class ChangeNameDialogComponent {\r\n    constructor(@Inject(MAT_DIALOG_DATA) public data: any, public dialogRef: MatDialogRef<ChangeNameDialogComponent>, private http: HTTPService) {}\r\n    \r\n    close() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    save() {\r\n        this.dialogRef.close(this.data.user);\r\n        this.http.changeUserName(this.data.user);\r\n    }\r\n}\r\n\r\n","<h1 mat-dialog-title>Устройство</h1>\r\n<mat-divider></mat-divider>\r\n\r\n<div mat-dialog-content>\r\n    <mat-form-field>\r\n        <p>Название устройства:</p>\r\n        <input matInput type=\"text\" [(ngModel)]=\"data.user.name\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <p>Описание:</p>\r\n        <textarea matInput type=\"text\" [(ngModel)]=\"data.user.description\"></textarea>\r\n    </mat-form-field>\r\n</div>\r\n                \r\n<div mat-dialog-actions>\r\n    <button mat-button (click)=\"save()\" color=\"primary\">\r\n        Сохранить\r\n    </button>\r\n    <button mat-button (click)=\"close()\">\r\n        Отмена\r\n    </button>\r\n</div>","import { HttpClient } from '@angular/common/http';\r\nimport { UserStatistics } from './Models/UserStatistics';\r\nimport { Events } from './Models/Events';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class HTTPService{\r\n  \r\n    private data: UserStatistics[] = [];\r\n    private link: string = 'https://localhost:5001/api';\r\n\r\n    constructor(private http: HttpClient){}\r\n    \r\n    getStatisticsList() {\r\n        return this.http.get(this.link + '/statistics/UserStatistics');\r\n    }\r\n\r\n    getUsersList() {\r\n        return this.http.get(this.link + '/users/Users');\r\n    }\r\n\r\n    getEventsForUser(ID: string) {\r\n        return this.http.get(this.link + '/events/Events/descriptions/' + ID);\r\n    }\r\n\r\n    deleteEvents(ID: string) {\r\n        this.http.delete(this.link + '/events/Events?ID=' + ID).subscribe();\r\n    }\r\n\r\n    createEventsDescription(events: Events[]) {\r\n        this.http.put(this.link + '/events/Events', events).subscribe();\r\n    }\r\n\r\n    changeUserName(user: UserStatistics) {\r\n        this.http.put(this.link + '/users/Users', user).subscribe();\r\n    }\r\n}","import { Events } from './Events';\r\n\r\nexport class UserStatistics{\r\n    name: string;\r\n    id: string;\r\n    date: string;\r\n    version: string;\r\n    os: string;\r\n    description: string;\r\n\r\n\r\n    events: Events[];\r\n}","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport * as signalR from '@aspnet/signalr';\r\n\r\nimport { UserStatistics } from '../Models/UserStatistics';\r\nimport { HTTPService } from '../HTTPService'\r\n\r\n@Component({\r\n    selector: 'Users-component',\r\n    templateUrl: './Users.component.html',\r\n    styleUrls: ['./Users.component.css']\r\n})\r\n\r\nexport class UsersComponent implements OnInit, OnDestroy { \r\n    displayedColumns: string[] = ['name', 'date', 'version', 'os', 'description'];\r\n\r\n    users: UserStatistics[];\r\n    selectedUserID: string;\r\n\r\n    connection = new signalR.HubConnectionBuilder()\r\n        .withUrl('https://localhost:5001/api')\r\n        .build();\r\n\r\n    constructor(private http: HTTPService, private router: Router){}\r\n\r\n    ngOnInit(): void{\r\n        this.http.getStatisticsList().subscribe((data:UserStatistics[]) => {\r\n            this.users = data;\r\n            this.http.getUsersList().subscribe((data:UserStatistics[]) => {\r\n                this.users.forEach(user => {\r\n                    user.description = data.find(x => x.id == user.id).description;\r\n                });\r\n            })\r\n        });\r\n\r\n        this.connection.on('update statistics', data => {\r\n            this.http.getStatisticsList().subscribe((data:UserStatistics[]) => this.users=data);\r\n        });\r\n        \r\n        this.connection.on('update users', data => {\r\n            this.http.getStatisticsList().subscribe((data:UserStatistics[]) => {\r\n                this.users = data;\r\n                this.http.getUsersList().subscribe((data:UserStatistics[]) => {\r\n                    this.users.forEach(user => {\r\n                        user.description = data.find(x => x.id == user.id).description;\r\n                    });\r\n                })\r\n            });\r\n        });\r\n\r\n        this.connection.start();\r\n    }\r\n\r\n    ngOnDestroy(): void{\r\n        this.connection.off('update statistics');\r\n        this.connection.off('update users');\r\n\r\n        this.connection.stop();\r\n    }\r\n\r\n    SetUser(user){\r\n        this.selectedUserID = user.id;\r\n\r\n        this.router.navigate(['/users', user.id]);\r\n    }\r\n}","<table mat-table [dataSource]=\"users\" width =\"100%\">\r\n    <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef> Имя узла </th>\r\n        <td mat-cell *matCellDef=\"let item\"> {{item.name}} </td>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"date\">\r\n        <th mat-header-cell *matHeaderCellDef> Дата последней статистики </th>\r\n        <td mat-cell *matCellDef=\"let item\"> {{item.date}} </td>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"version\">\r\n        <th mat-header-cell *matHeaderCellDef> Версия Client </th>\r\n        <td mat-cell *matCellDef=\"let item\"> {{item.version}} </td>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"os\">\r\n        <th mat-header-cell *matHeaderCellDef> Тип устройства </th>\r\n        <td mat-cell *matCellDef=\"let item\"> {{item.os}} </td>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"description\">\r\n        <th mat-header-cell *matHeaderCellDef> Описание </th>\r\n        <td mat-cell *matCellDef=\"let item\"> {{item.description}} </td>\r\n    </ng-container>\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let user; columns: displayedColumns;\" \r\n        [ngClass]=\"{'highlight': selectedUserID == user.id}\" \r\n        (click)=\"SetUser(user)\"></tr>\r\n</table>","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { AppModule } from './app/app.module';\r\nconst platform = platformBrowserDynamic();\r\nplatform.bootstrapModule(AppModule);","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}